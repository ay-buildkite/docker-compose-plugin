---
# This is the main pipeline file that orchestrates all our test approaches
steps:
  # Testing Multiple Docker Compose Files Approach
  - label: ':docker: Multiple Compose Files'
    working_directory: multi-compose
    plugins:
      - docker-compose#v4.14.0:
          config: [docker-compose.yml, docker-compose.unit.yml]
          run: app
          command: [npm, run, test:unit]
  - label: ':docker: :postgresql: Multiple Compose Files - Integration'
    working_directory: multi-compose
    plugins:
      - docker-compose#v4.14.0:
          config: [docker-compose.yml, docker-compose.integration.yml]
          run: app
          command: [npm, run, test:integration]

  # Testing Dependencies Control Approach
  - label: ':docker: Dependencies Control - Unit Tests'
    working_directory: deps-ctrl
    plugins:
      - docker-compose#v4.14.0:
          run: app
          dependencies: false
          command: [npm, run, test:unit]
  - label: ':docker: Dependencies Control - DB Tests'
    working_directory: deps-ctrl
    plugins:
      - docker-compose#v4.14.0:
          run: app
          dependencies: true
          command: [npm, run, test:db]

  # Testing Manual Service Control Approach
  - label: ':docker: Manual Service Control - Unit Tests'
    working_directory: manual-serv-ctrl
    plugins:
      - docker-compose#v4.14.0:
          run: app
          command: [npm, run, test:unit]
  - label: ':docker: :postgresql: Manual Service Control - Integration'
    working_directory: manual-serv-ctrl
    commands:
      # Start the database first
      - docker compose up -d db
      # Wait for database to be ready
      - docker compose run --rm app /bin/sh -c "until nc -z db 5432; do sleep 1; done"
    plugins:
      - docker-compose#v4.14.0:
          run: app
          command: [npm, run, test:integration]
